char* dictionnaire(Element* huffman, char letter, char** pArray)
{
    if(huffman == NULL) return NULL;
    
    if(huffman->c == letter)
    {
        return "";
    }
    
    char* l = dictionnaire(huffman->left, letter, pArray);
    char* r = dictionnaire(huffman->right, letter, pArray);
    
    char array[9];
    strcpy(array, ""); // initialiser array
    
    if(l != NULL)
    {
        strcat(array,"0");
        strcat(array,l);
        strcpy(*pArray, array);
    }
    else
    {
        if(r != NULL)
        {
            strcat(array,"1");
            strcat(array,r);
            strcpy(*pArray, array);
        }
        else
            return NULL; // pas trouvé le caractère (l == NULL et r == NULL)
    }
    
    return *pArray;
   
}



void return_each_letter(Element* huffman, char* Array)
{
    if(huffman == NULL) return;
    
    if((huffman->left == NULL) && (huffman->right == NULL))
    {
        int s = (int) strlen(Array); // taille de la chaine
        *(Array + s) = huffman->c; // à la pos s, on place le caractère de l'arbre de huffman
        *(Array + s + 1) = '\0';
        return;
    }
    
    return_each_letter(huffman->left, Array);
    return_each_letter(huffman->right, Array);
    
}


void write_dico(Element* huffman, FILE* dico)
{
    char Array[257];
    strcpy(Array, "");
    
    return_each_letter(huffman, Array);
    
    int i = 0;
    char* code = malloc(sizeof(char)*9);
    while(Array[i] != '\0')
    {
        fprintf(dico, "%c : %s\n",Array[i], dictionnaire(huffman,Array[i],&code));
        i++;
    }
}
